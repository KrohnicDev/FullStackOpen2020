{"version":3,"sources":["components/PersonForm.js","components/PersonList.js","components/Filter.js","service/PersonService.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","props","addPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","value","onChange","type","PersonList","persons","deletePerson","handleDeleteClick","event","index","target","person","window","confirm","name","length","map","key","id","number","onClick","Filter","filterText","handleFilterTextChange","endpoint","getDataFromResponse","response","data","axios","get","then","contact","put","delete","post","Notification","message","className","notificationTypes","App","useState","setPersons","notification","setNotification","handleChange","callback","setNewName","setNewNumber","setFilterText","refreshPersons","personService","catch","err","showNotification","filtering","filteredPersons","filter","toLowerCase","includes","setTimeout","useEffect","preventDefault","existingPerson","find","newPerson","console","log","error","finally","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd91b305.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = (props) => {\n\n    const { addPerson, newName, newNumber, handleNameChange, handleNumberChange } = props\n\n    return <form onSubmit={addPerson}>\n        <div>name:\n            <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>number:\n            <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>\n}\n\nexport default PersonForm","import React from 'react'\n\nconst PersonList = (props) => {\n\n  const { persons, deletePerson } = props\n\n  const handleDeleteClick = (event) => {\n    const index = event.target.value\n    const person = persons[index]\n    const deletionConfirmed = window.confirm(`Delete contact ${person.name}?`)\n\n    if (deletionConfirmed) {\n      deletePerson(person)\n    }\n  }\n\n  if (persons.length === 0) {\n    return <p>No numbers found</p>\n  }\n\n  return persons.map((person, index) =>\n    <div key={person.id}>\n      <p>\n        {person.name} {person.number}\n        <button value={index} onClick={handleDeleteClick}>Delete</button>\n      </p>\n    </div>\n  )\n}\n\nexport default PersonList","import React from 'react'\n\nconst Filter = (props) => {\n    const { filterText, handleFilterTextChange } = props\n    return <div>filter:\n        <input value={filterText} onChange={handleFilterTextChange} />\n    </div>\n}\n\nexport default Filter","import axios from 'axios'\n\nconst endpoint = 'api/persons'\nconst getDataFromResponse = (response) => response.data\n\nconst getAll = () => {\n  return axios\n    .get(endpoint)\n    .then(getDataFromResponse)\n}\n\nconst getOne = (id) => {\n  return axios\n    .get(endpoint + '/' + id)\n    .then(getDataFromResponse)\n}\n\nconst create = (contact) => {\n  return axios\n    .post(endpoint, contact)\n    .then(getDataFromResponse)\n}\n\nconst update = (contact) => {\n  return axios\n    .put(endpoint + '/' + contact.id, contact)\n    .then(getDataFromResponse)\n}\n\nconst deleteOne = (id) => {\n  return axios\n    .delete(endpoint + '/' + id)\n    .then(getDataFromResponse)\n}\n\nexport default {\n  getAll,\n  getOne,\n  update,\n  deleteOne,\n  create\n}","import React from 'react'\n\nconst Notification = (props) => {\n  const { message, type } = props\n\n  if (!message || !type) {\n    return null\n  }\n\n  return <div className={type + ' notification'} >\n    {message}\n  </div>\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport PersonList from './components/PersonList'\nimport Filter from './components/Filter'\nimport personService from './service/PersonService'\nimport Notification from './components/Notification'\n\nconst notificationTypes = {\n  ERROR: \"error\",\n  INFO: \"info\"\n}\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [notification, setNotification] = useState({})\n\n  const handleChange = (event, callback) => {\n    const value = event.target.value\n    callback(value)\n  }\n\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterText, setFilterText] = useState('')\n\n  const handleNameChange = event => handleChange(event, setNewName)\n  const handleNumberChange = event => handleChange(event, setNewNumber)\n  const handleFilterTextChange = event => handleChange(event, setFilterText)\n\n  const handleSubmitClick = event => {\n    event.preventDefault()\n    const existingPerson = persons.find(person => person.name === newName)\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (existingPerson) {\n      const hasConfirmedUpdate = window.confirm(`${newName} already exists in the phonebook. Do you want replace their number with a new one?`)\n\n      if (hasConfirmedUpdate) {\n        personService\n          .update({ ...existingPerson, number: newNumber })\n          .then(() => showNotification(\n            `Updated ${newName}`, notificationTypes.INFO))\n          .catch(err => {\n            console.log(err.response)\n            const response = err.response\n            const message = response ? response.data.error : err.message\n            showNotification(\n              `Couldn't update ${newName}. ${message}`, notificationTypes.ERROR)\n          })\n          .finally(refreshPersons)\n      }\n\n    } else {\n      personService\n        .create(newPerson)\n        .then(() => showNotification(\n          `Added a new contact: ${newPerson.name}`, notificationTypes.INFO))\n        .catch(err => {\n          const response = err.response\n          const message = response ? response.data.error : err.message\n          showNotification(message, notificationTypes.ERROR)\n        })\n        .finally(refreshPersons)\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const refreshPersons = () => {\n    personService\n      .getAll()\n      .then(persons => {\n        setPersons(persons)\n      })\n      .catch(err => showNotification(\n        `Couldn't fetch persons from the server.`, notificationTypes.ERROR\n      ))\n  }\n\n  const deletePerson = (person) => {\n    personService\n      .deleteOne(person.id)\n      .then(() => showNotification(\n        `${person.name} deleted`, notificationTypes.INFO))\n      .catch(() => showNotification(\n        'Person not found', notificationTypes.ERROR))\n      .finally(refreshPersons)\n  }\n\n  const filtering = filterText.length > 1\n\n  const filteredPersons = filtering\n    ? persons.filter(person =>\n      person.name\n        .toLowerCase()\n        .includes(filterText.toLowerCase()))\n    : persons\n\n  const showNotification = (message, type) => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification({})\n    }, 5000)\n  }\n\n  useEffect(refreshPersons, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification.message} type={notification.type} />\n      <Filter\n        filterText={filterText}\n        handleFilterTextChange={handleFilterTextChange} />\n      <h2>Add new</h2>\n      <PersonForm\n        addPerson={handleSubmitClick}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers {filtering ? ' (filtered)' : ''}</h2>\n      <PersonList persons={filteredPersons} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}